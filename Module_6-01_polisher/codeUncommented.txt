

#include <linux/mm.h>
#include <linux/module.h>
#include <linux/skbuff.h>
#include <linux/inet_diag.h>

#include <net/tcp.h>

#include "tcp_vegas.h"

static int alpha = 2;
static int beta  = 4;
static int gamma = 1;

module_param(alpha, int, 0644);
MODULE_PARM_DESC(alpha, "lower bound of packets in network");
module_param(beta, int, 0644);
MODULE_PARM_DESC(beta, "upper bound of packets in network");
module_param(gamma, int, 0644);
MODULE_PARM_DESC(gamma, "limit on increase (scale by 2)");



static void vegas_enable(struct sock *sk)
{
    const struct tcp_sock *tp = tcp_sk(sk);
    struct vegas *vegas = inet_csk_ca(sk);
    
    
    vegas->doing_vegas_now = 1;
    
    
    vegas->beg_snd_nxt = tp->snd_nxt;
    
    vegas->cntRTT = 0;
    vegas->minRTT = 0x7fffffff;
}


static inline void vegas_disable(struct sock *sk)
{
    struct vegas *vegas = inet_csk_ca(sk);
    
    vegas->doing_vegas_now = 0;
}

void tcp_vegas_init(struct sock *sk)
{
    struct vegas *vegas = inet_csk_ca(sk);
    
    vegas->baseRTT = 0x7fffffff;
    vegas_enable(sk);
}
EXPORT_SYMBOL_GPL(tcp_vegas_init);


static void tcp_vegas_cong_avoid(struct sock *sk, u32 ack, u32 acked)
{
    struct tcp_sock *tp = tcp_sk(sk);
    struct vegas *vegas = inet_csk_ca(sk);
    
    if (!vegas->doing_vegas_now) {
        tcp_reno_cong_avoid(sk, ack, acked);
        return;
    }
    
    if (after(ack, vegas->beg_snd_nxt)) {
        
        
        
        vegas->beg_snd_nxt  = tp->snd_nxt;
        
        
        
        if (vegas->cntRTT <= 2) {
            
            tcp_reno_cong_avoid(sk, ack, acked);
        } else {
            u32 rtt, diff;
            u64 target_cwnd;
            
            
            
            
            rtt = vegas->minRTT;
            
            
            target_cwnd = (u64)tp->snd_cwnd * vegas->baseRTT;
            do_div(target_cwnd, rtt);
            
            
            diff = tp->snd_cwnd * (rtt-vegas->baseRTT) / vegas->baseRTT;
            
            if (diff > gamma && tp->snd_cwnd <= tp->snd_ssthresh) {
                
                
                
                tp->snd_cwnd = min(tp->snd_cwnd, (u32)target_cwnd+1);
                tp->snd_ssthresh = tcp_vegas_ssthresh(tp);
                
            } else if (tp->snd_cwnd <= tp->snd_ssthresh) {
                
                tcp_slow_start(tp, acked);
            } else {
                
                
                
                if (diff > beta) {
                    
                    tp->snd_cwnd--;
                    tp->snd_ssthresh
                    = tcp_vegas_ssthresh(tp);
                } else if (diff < alpha) {
                    
                    tp->snd_cwnd++;
                } else {
                    
                }
            }
            
            if (tp->snd_cwnd < 2)
            tp->snd_cwnd = 2;
            else if (tp->snd_cwnd > tp->snd_cwnd_clamp)
            tp->snd_cwnd = tp->snd_cwnd_clamp;
            
            tp->snd_ssthresh = tcp_current_ssthresh(sk);
        }
        
        
        vegas->cntRTT = 0;
        vegas->minRTT = 0x7fffffff;
    }
    
    else if (tp->snd_cwnd <= tp->snd_ssthresh)
    tcp_slow_start(tp, acked);
    
}
